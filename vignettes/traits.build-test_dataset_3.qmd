---
title: 'Totorial for adding dataset: test_dataset_3'
author: "Elizabeth Wenk, Sophie Yang"
date: "2023-09-16"
format: 
  html:
    toc: TRUE
editor: visual
---

## Overview

This is the third of five tutorials on adding datasets to your traits.build database.

Before you begin this tutorial, ensure you have installed traits.build, cloned the traits.build-template repository, and have successfully build a database from the datasets in `traits.build-template`. Instructions are available at [XX]https://xx}

### Goals

-   Learn how to [add contexts](#contexts). 


### New Functions Introduced

-   metadata_add_contexts

-   metadata_exclude_observations

------------------------------------------------------------------------

## Adding test_dataset_3

### Ensure the dataset folder contains the correct data files

In the traits.build-template repository, there is a folder titled `test_dataset_3` within the data folder. 

-   Ensure that this folder exists on your computer. 

-   The file `data.csv` exists within the `test_dataset_3` folder. 

-   There is a folder `raw` nested within the `test_dataset_3` folder, that contains one file, `notes.txt`. 

### source necessary functions

-   If you have restarted R Studio since last adding a dataset, ensure all functions are loaded from both the traits.build package and the custom functions file:

``` {r eval=FALSE}
library(traits.build)
source("scripts/custom.R")
```

### Use functions to create a metadata.yml file

#### **Create a metadata template**

To create the metadata template, run:

```{r eval=FALSE}
metadata_create_template("test_dataset_3")
```

As with in the previous tutorials, this function leads you through a series of menus requiring user input. Ensure you select:

[data format:]{style="color:blue;"} [**wide**]{style="color:red;"}\
[taxon_name column:]{style="color:blue;"} [**1: Species**]{style="color:red;"}\
[location_name column:]{style="color:blue;"} [**5: site**]{style="color:red;"}\
[individual_id column:]{style="color:blue;"} [**NA**]{style="color:red;"}\
[collection_date column:]{style="color:blue;"} [**NA**]{style="color:red;"}\
[Enter collection_date range in format '2007/2009':]{style="color:blue;"} [**2011-02/2011-03**]{style="color:red;"}\

In this dataset, unlike the first two, the data being input is at the individual-level. Since there is only a single data row for each individual, it is not required to map in an individual_id. A column with an `individual_id` is required if you want to keep track of multiple rows of data for the same individual.

*Navigate to the dataset's folder and open the metadata.yml file in Visual Studio Code, to ensure information is added to the expected sections as you work through the tutorial.*

------------------------------------------------------------------------

#### **Propagate source information into the metadata.yml file**

This dataset is from a published source and therefore the source information can be added with the function `metadata_add_source_doi`:

```{r eval=FALSE}
metadata_add_source_doi(dataset_id = "test_dataset_3", doi = "10.1007/s11104-013-1725-x")
```

confirm:

1.  the authors' names are formatted as `first name last name` or `first initial last name`\
2.  the article title is in sentence case\
3.  the page numbers are filled in as a range, separated by a double dash\

You have just added 3 doi's that all yield perfect reference information - and indeed most references are added correctly, but some journals and doi's for many older references are in ALL CAPS or missing page numbers, so it is worth checking.

------------------------------------------------------------------------

#### **Add location details**

All data for this dataset was collected at a single location, specified in the `data.csv` file as `The University of Melbourne Burnley campus`. No additional details are provided. For such studies, it is best to look up the campus location and input approximate latitude/longitude coordinates. 

As well as adding locations and location properties from a table, the function `metadata_add_locations` lets you add a basic location data scaffold in metadata.yml.

For instance, for this study:\

1.    you add the location names from the data.csv file\
2.    the function automatically adds blank fields for latitude, longitude, and description\
3.    values for these fields must then be filled in manually\

```{r eval=FALSE}
data <- read_csv("data/test_dataset_3.csv")

metadata_add_locations("test_dataset_3", data)
```

You select the location name, but not any location properties, as none are provided in the data.csv file or another tabular format.

[location_name:]{style="color:blue;"} [**4: site**]{style="color:red;"}\
[location_property columns:]{style="color:blue;"} [*just press enter*]{style="color:red;"}\

This creates the following scaffold in `methdata.yml`:\ 

```{r eval=FALSE}
  The University of Melbourne Burnley campus:
    latitude (deg): na_character
    longitude (deg): na_character
    description: na_character
```

-   `metadata_add_locations` automatically selects the unique values in the location name column.\ 
-   if no columns with location properties are specified, the function just adds the three core location properties.\ 
-   the values for these location properties are available in the notes file.\ 

------------------------------------------------------------------------

#### **Add traits**

To select columns in the `data.csv` file that include trait data, run:

```{r eval=FALSE}
metadata_add_traits(dataset_id = "test_dataset_3")
```

Select columns [**5 6 7 8 9 10**]{style="color:red;"}, as these contain trait data.

------------------------------------------------------------------------

#### **Add contexts** {#contexts}

A context is any piece of ancillary information that helps explain why a certain trait value was measured.\ 

In traits.build, some contexts are mapped in as part of the default metadata structure, including the location (& location properties), a general sense of organism age (`life_stage`), `basis_of_record`, and the general methods for each trait.\

However most contexts are pieces of information that are essential to record for a specific dataset, but not recorded for most other datasets. The context field therefore allows any context property to be added manually.\

Context properties are divided into 5 categories:\

1.    **method contexts**: Context properties that capture *differences* in method between measurements of the same trait. For plants, canopy position and leaf age are two common method contexts.\

2.    **temporal contexts**: Context properties that capture explicit time-related differences between groups of measurements. This is separate from `collection_date`, as an explicit meaning should accompany each temporal context property and the distinct values may span a range of collection dates. For plants `sampling season` (dry versus wet) is a commonly mapped in temporal context.\

3.    **entity contexts**: This context property category pertains to individual-level measurements, and documents features of the individual that explicitly distinguish it from other individuals that are measured. In addition to features like the sex of an individual, it is the location to document individual-level co-variates that are not themselves traits, but are information required to interpret other trait values.\

4.    **treatment contexts**: Any experimental treatment that has been applied to groups of individuals.\

5.    **plot contexts**: Any variation within a documented location, where different individuals experience know differences in growing/living conditions or growing/living history. For plants, this context category is frequently used to map in slope position or fire history.\

Context properties are most frequently included in the `data.csv` file as columns of values. Occasionally, separate columns of trait values might represent measurements with different context property values, a topic for a later tutorial.

Context properties that are columns in the data file, can be added with the function `metadata_add_contexts`:

``` {r eval=FALSE}
metadata_add_contexts("test_dataset_3")
```



