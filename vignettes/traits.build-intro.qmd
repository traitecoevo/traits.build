---
title: "Getting started with traits.build"
format: html
editor: visual
---

## Welcome to traits.build

traits.build is an R package that was first developed to build AusTraits, a harmonised, open-source database of Australian plant traits. The code has been transformed into a standalone package allowing anyone to build a tabular database for any taxonomic group and any collection of traits.

The project's guiding principles are to:

1.  Create open-source, harmonised, reproducible databases from disparate datasets.
2.  Provide a fully transparent workflow.
3.  Offer a relational database structure that fully documents the contextual data essential to interpreting ecological data.
4.  Offer a straightforward, robust template for building a trait dictionary.
5.  Offer a database structure that is underlain by a documented ontology, ensuring each database field is interpretable and interoperable with other databases and data structures.

## Install traits.build

First install the traits.build R package:

```{r eval=FALSE}
remotes::install_github("traitecoevo/traits.build", quick = TRUE)
```

Next access the collection of traits.build functions:

```{r eval=FALSE}
library(traits.build)
```

## Clone traits.build-template

traits.build-template is a GitHub repository that contains:

1.  Core files required to build your own database:
    -   a sample [trait dictionary](https://github.com/traitecoevo/traits.build-template/blob/master/config/traits.yml)

    -   a [unit conversions file](https://github.com/traitecoevo/traits.build-template/blob/master/config/unit_conversions.csv)

    -   a generic [database metadata file](https://github.com/traitecoevo/traits.build-template/blob/master/config/metadata.yml)

    -   a placeholder [taxon list](https://github.com/traitecoevo/traits.build-template/blob/master/config/taxon_list.csv)

    -   a script of useful [R functions](https://github.com/traitecoevo/traits.build-template/blob/master/scripts/custom.R)
2.  Two pre-added datasets.
    -   See how metadata is documented in fully propagated metadata files.

    -   Build a skeletal database before adding your own datasets.
3.  Five datasets with explicit tutorials for filling in the dataset metadata files.
    -   The tutorials for these datasets introduce you to the traits.build functions.

    -   By working through the five dataset tutorials, you are progressively introduced to how the complexities of ecological datasets can be documented within the traits.build structure

    -   The datasets offer explicit examples of the types of complexities summarised in the [Adding Data](https://githubâ€¦) vignette.

## Understand our database structure

traits.build can be viewed through two lenses, its output structure and its underlying conceptual framework.

### Output structure

traits.build is a relational database. There is a core traits table, supported by ancillary tables that document location properties (include latitude & longitude), context properties, dataset and measurement methods, taxon concepts, contributor details, and sources. All tables are stored in long format, such that there is a single column that includes all trait names (or location properties, or context properties).

A series of identifiers, including both textual fields (i.e. taxon_name, trait_name, dataset_id) and numeric identifiers link the ancillary tables to the traits table. The many numeric identifiers are overwhelming until you consider the conceptual framework, or mindmap, that underpins traits.build. They include: observation_id, population_id, individual_id, temporal_id, location_id, entity_context_id, plot_id, and source_id.

Storing the resource as a relational table greatly reduces file sizes and facilitates searching for a particular metadata field

### Conceptual framework

traits.build's database structure effectively captures the complexities inherent to ecological data. Each dataset is unique, with measurements recorded on different entities (individuals, populations, species), in specific locations, and under countless environmental and experimental conditions, the so-called context of a measurement. The context offers essential meaning to each trait value. An ecological database must effectively capture all relevent contexts or the accompany trait measurements lose much of their value.

The multitude of identifiers traits.build is designed around the concept of an **observation**, a collection of measurements made at a specific point in time on a specific **entity**. OBOE, the Extensible Observation Ontology, first developed this conceptual framework, explicitly for complex ecological datasets. An **observation_id** links the trait measurements that comprise a single observation. Measurements made at different points in time, on different entities, at different locations, or under different contextual conditions require unique **observation_id** values. The additional identifiers in the traits table (and the ancillary tables) were developed to ensure that unique observation_ids were generated for distinct observations, per this framework. Within a dataset, observation_id's are generated for unique combinations of the fields: XXX. For instance, if repeat measurements are made on an individual across time, the two observations will share an **individual_id** but have distinct **temporal_id** values. A full description of the unique importance of each identifier is available XXX.

## Read the traits.build vignettes
