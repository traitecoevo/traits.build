source:
  primary:
    key: Test_2023_3
    bibtype: Online
    year: 2023
    author: National Herbarium of New South Wales
    title: The Plant Information Network System of The Royal Botanic Gardens and Domain
      Trust Version 2.0.
    url: https://plantnet.rbgsyd.nsw.gov.au/
    note: accessed on 6 May, 2022.
contributors:
  data_collectors:
  - last_name: Duretto
    given_name: Marco
    ORCID: 0000-0003-1013-4291
    affiliation: National Herbarium of New South Wales, Australian Institute of Botanical
      Science, Royal Botanic Gardens and Domain Trust, Sydney, Australia
  - last_name: Coleman
    given_name: David
    ORCID: 0000-0002-1773-6597
    affiliation: Evolution & Ecology Research Centre, School of Biological, Earth,
      and Environmental Sciences, UNSW Sydney, Australia
    additional_role: .na
    notes: Responsible for extracting data from online resource
  dataset_curators: Elizabeth Wenk
dataset:
  data_is_long_format: yes
  custom_R_code:     '
    data %>%
      filter(!is.na(taxon_name)) %>%
      filter(str_detect(taxon_name, " ")) %>%
      filter(!category %in% c("pappus")) %>%
      mutate(
        measurement_remarks = ifelse(is.na(category), NA, paste0("Trait value refers to ", category)),
        inferred = ifelse(stringr::str_detect(flora_value, "inferred"), flora_value, NA),
        inferred = ifelse(stringr::str_detect(flora_value, "inferred_from_species"), "inferred_from_species", inferred),
        inferred = ifelse(stringr::str_detect(flora_value, "inferred_from_genus"), "inferred_from_genus", inferred),
        inferred = ifelse(stringr::str_detect(flora_value, "inferred_from_family"), "inferred_from_family", inferred),
        inferred = ifelse(stringr::str_detect(flora_value, "inferred_from_taxonomy"), "inferred_from_taxonomy", inferred),
        inferred = ifelse(!inferred %in% c("inferred_from_species", "inferred_from_taxonomy", "inferred_from_genus", "inferred_from_family") & !is.na(inferred), "inferred_from_trait", inferred),
        inferred = ifelse(is.na(inferred),"scored from text", inferred),
        entity_measured = ifelse(category %in% c("adultleaves", "leaves", "fronds", "lamina", "simple_leaves", "leafblade", "median_leaves", "lobed_lamina", "lobed_leaves",
         "blade", "blades", "leaf", "leafblades", "frond", "caducous_leaves", "entire_leaves", "entire_leaves_lamina",
         "subtending_leaves", "axillary_leaves", "lobed_leaves_lamina", "pinnate_leaves", "erect_leaves", "prostrate_leaves",
         "leaves_southern", "leaves_northern", "adultleaves_high_altitudes","petiole", "dissected_fronds", "simple_fronds", "sessile_leaves",
         "petiolate_leaves", "intermediateleaves", "crownleaves", "unifacial_leaves", "dorsiventral_leaves", "vegetative_branch_leaves",
         "flowering_branch_leaves", "divided_leaves", "terete_leaves", "flat_leaves","clustered_leaves","single_leaves",
         "entire_lamina", "outer_leaves", "inner_leaves", "pinnate_lamina", "simple_lamina", "foliage_fronds", "nest_fronds",
         "pinnate_fronds","leaves_branches", "leaves_climbing_stems", "freelamina", "rolled_blade","flat_blade",  "middle_leaves",
         "undivided_leaves", "raylet_leaves", "flattened_blade", "distal_leaves", "terrestrial _plant_leaves", "inflorescence_leaves"), "leaf", NA),
        entity_measured = ifelse(category %in% c("emergent_leaf", "floating_leaves_blade", "emergent_lamina", "aerial_leaves", "emergent_leaves", "floating_blade", "floating_leaves", "floating_lamina"), "emergent_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("submerged_leaf", "submerged_lamina", "submerged_leaves","submerged_leaves_blade", "submerged_blade"), "submerged_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("sterile_leaf", "sterile_lamina", "sterile_fronds", "sterile_leaves"), "sterile_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("fertile_leaf", "fertile_fronds", "fertile_lamina", "fertile_frond", "fertile_leaves"), "fertile_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("leaflets", "trifoliate_leaves", "laminae", "leaflet", "lateral_leaflets", "terminal_leaflets", "simple_leaves_and_leaflets",  "terminal_leaflets_simple_leaves", "leaves_simple_leaflets", "leafletlamina", "terminal_leaflet", "lateral_leaflet" , "basal_leaflets", "sterile_leaflets", "fertile_leaflets", "upper_leaflets", "lower_leaflets", "segmented_leaves", "floating_leaflets", "primary_leaflets", "secondary_leaflets", "submerged_leaflets"), "leaflet", entity_measured),
        entity_measured = ifelse(category %in% c("pinnule", "pinnules", "secondary_pinnae", "longest_secondary_pinnae"), "secondary_pinnae", entity_measured),
        entity_measured = ifelse(category %in% c("tertiary_pinnae"), "tertiary_pinnae", entity_measured),
        entity_measured = ifelse(category %in% c("quaternary_pinnae"), "quaternary_pinnae", entity_measured),
        entity_measured = ifelse(category %in% c("primary_pinnae", "longest_primary_pinnae", "largest_pinnae", "pinnae", "pinnae or pinnule", "longest_pinnae", "lateral_pinnae", "terminal_pinnae"), "pinnae", entity_measured),
        entity_measured = ifelse(category %in% c("proximal_pinnae"), "proximal_pinnule", entity_measured),
        entity_measured = ifelse(category %in% c("distal_pinnae"), "distal_pinnule", entity_measured),
        entity_measured = ifelse(category %in% c("upper_pinnae"), "upper_pinnae", entity_measured),
        entity_measured = ifelse(category %in% c("apical_pinnules"), "apical_pinnule", entity_measured),
        entity_measured = ifelse(category %in% c("lower_pinnae", "basal_pinnae", "lowest_pinnae"), "basal_pinnae", entity_measured),
        entity_measured = ifelse(category %in% c("fertile_pinnae", "fertile_pinnules"), "fertile_pinnule", entity_measured),
        entity_measured = ifelse(category %in% c("sterile_pinnules", "sterile_pinnae"), "sterile_pinnule", entity_measured),
        entity_measured = ifelse(category %in% c("scale_leaf", "scale_leaves", "cataphylllamina", "involucral_lamina"), "scale_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("lower_leaf", "lower_leaves", "lower_leaf_lamina", "lower_lamina", "lowest_leaves"), "lower_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("upper_leaf", "upper_leaves", "upper_leaf_lamina", "laminas", "upper_lamina"), "upper_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("stemleaves", "lateral_stem_leaves", "main_stem_leaves","stem_leaves","flowerin_stem_leaves","vegetative_stem_leaves", "erect_stem_leaves", "stem_lamina", "fruiting_stem_leaves", "lateral_stemleaf_lamina"), "stem_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("lateral_leaf", "lateral_leaves", "axillary_shoot_leaves", "axillary_stem_leaves"), "lateral_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("cauline_leaves", "cauline_lamina", "caulineleaves", "cauline_leaf"), "cauline_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("basal_leaves", "radical_leaves", "basal_eaves", "nest_fronds", "radical_leaf", "basal_lamina","basal_leaf", "rosette_leaves"), "basal_leaf", entity_measured),
        entity_measured = ifelse(category %in% c("phyllode", "phyllodes"), "phyllode", entity_measured),
        entity_measured = ifelse(category %in% c("cladode", "cladodes", "phylloclades"), "cladode", entity_measured),
        entity_measured = ifelse(category %in% c("leafsegments"), "lobes", entity_measured),
        entity_measured = ifelse(category %in% c("fruits", "fruit"), "fruit", entity_measured),
        entity_measured = ifelse(category %in% c("infructescence"), "infructescence", entity_measured),
        entity_measured = ifelse(category %in% c("apiculum"), "apiculum", entity_measured),
        entity_measured = ifelse(category %in% c("male_cones"), "male_cones", entity_measured),
        entity_measured = ifelse(category %in% c("female_cones"), "female_cones", entity_measured),
        entity_measured = ifelse(category %in% c("disc_achenes"), "disc_achenes", entity_measured),
        entity_measured = ifelse(category %in% c("ray_achenes"), "ray_achenes", entity_measured),
        entity_measured = ifelse(category %in% c("valve", "valves"), "valve", entity_measured),
        entity_measured = ifelse(category %in% c("pappus"), "pappus", entity_measured),
        entity_measured = ifelse(category %in% c("capsule", "silicula", "nut", "utricles", "pyrenes", "berry", "achenes"), "fruit", entity_measured),
        species = "species",
        trait_name = ifelse(value_type == "maximum" & trait_name == "fruit_width", "fruit_width_max", trait_name),
        trait_name = ifelse(value_type == "minimum" & trait_name == "fruit_width", "fruit_width_min", trait_name)
      )  %>%
      arrange(category) %>%
      distinct() %>%
      mutate(entity_measured = ifelse(is.na(entity_measured), "unknown", entity_measured))
  '
  collection_date: unknown/2022
  taxon_name: taxon_name
  trait_name: trait_name
  value: trait_value
  location_name: test_location
  entity_type: species
  measurement_remarks: measurement_remarks
  description: Plant growth form data extracted from the NT Flora Online
  basis_of_record: literature
  life_stage: adult
  sampling_strategy: This dataset is sourced from the PlantNet online flora (version
    date 2022-05-06). Briefly, the textual descriptions of each taxon were downloaded
    and organised into a tabular format of individual taxon names and their corresponding
    text using R coding script. Sentences and phrases were categorised using a large
    glossary of botanical terminology as referring to one of the following, the entire
    organism, stem, leaf, flower, fruit/seed, roots and environment/habitat. Key terms
    corresponding to trait values in AusTraits were then extracted from these smaller
    chunks of text using a reference table containing a) the AusTraits trait name,
    b) the AusTraits trait value and c) terms to search for in the text. The resulting
    traits were then checked manually using a subset of ~500 taxa to search for errors
    and update the reference table and coding script accordingly. The process was
    repeated iteratively to remove any wrongly classified trait values and to ensure
    as many correct trait values as possible were captured using the algorithm. Where
    possible, unclassified taxa were inferred as possessing a trait value from a higher-level
    taxonomic description e.g. the fruit type of all taxa in the Adenanthos genus
    were scored as `achene`, which was mentioned only in the genus description.
  original_file: .na
  notes: .na
locations:
  australia:
    description: First made-up location for testing
  australia_2:
    latitude (deg): -27.158
    longitude (deg): 142.685
    description: Second made-up location for testing
contexts:
- context_property: trait scoring method
  category: method_context
  var_in: inferred
  values:
  - find: scored from text
    value: scored_from_text
    description: Trait value scored directly from taxon description.
  - value: inferred_from_species
    description: Trait value inferred from species-level taxon description.
  - value: inferred_from_genus
    description: Trait value inferred from genus-level taxon description.
  - value: inferred_from_family
    description: Trait value inferred from family-level taxon description.
- context_property: entity measured
  category: entity_context
  var_in: entity_measured
  values:
  - find: unknown
    value: fruit
  - value: fruit
traits:
- var_in: fruit_colour
  unit_in: .na
  trait_name: fruit_colour
  entity_type: species
  basis_of_value: expert_score
  value_type: mean
  replicates: .na
  methods: When specified in the taxon description, only the colours of the fruit
    at maturity or the dominant colours of the fruit exterior were scored. If neither
    were specified, all colours associated with the fruit were scored.
- var_in: fruit_dehiscence
  unit_in: .na
  trait_name: fruit_dehiscence
  entity_type: species
  basis_of_value: expert_score
  value_type: mean
  replicates: .na
  methods: Taxa were scored as dehiscent from a variety of terms in the text including
    the kind of dehiscence e.g. scepticidal, loculicidal or possessing valves.
- var_in: fruit_length
  unit_in: mm
  trait_name: fruit_length
  entity_type: species
  basis_of_value: measurement
  value_type: mean
  replicates: '3'
  methods: The term used to describe the fruit length was stored  as a measurement
    remark for greater clarity e.g. fruit, achene, capsule. Fruits which were spherical
    or round in shape were inferred as possessing the same dimensions in other planes.
- var_in: fruit_length_dupe
  unit_in: mm
  trait_name: .na
  entity_type: species
  basis_of_value: measurement
  value_type: mean
  replicates: '3'
  methods: trait_name set to .na
- var_in: fruit_width_min
  unit_in: units
  trait_name: fruit_width
  entity_type: species
  basis_of_value: measurement
  value_type: minimum
  collection_date: collection_date
  replicates: '3'
  methods: Minimum fruit width; the term used to describe the fruit width was stored as
    a measurement remark for greater clarity e.g. fruit, achene, capsule. Fruits which
    were spherical or round in shape were inferred as possessing the same dimensions in
    other planes.
- var_in: fruit_width_max
  unit_in: units
  trait_name: fruit_width
  entity_type: species
  basis_of_value: measurement
  value_type: maximum
  replicates: '3'
  methods: Maximum fruit width; the term used to describe the fruit width was stored as
    a measurement remark for greater clarity e.g. fruit, achene, capsule. Fruits which
    were spherical or round in shape were inferred as possessing the same dimensions in
    other planes.
- var_in: flowering_time
  unit_in: .na
  trait_name: flowering_time
  entity_type: population
  value_type: mode
  basis_of_value: expert_score
  methods: Made up flowering time values.
  replicates: .na
substitutions:
- trait_name: fruit_dehiscence
  find: not dehiscent
  replace: indehiscent
- trait_name: flowering_time
  find: winter
  replace: nnnnnyyynnnn
- trait_name: flowering_time
  find: not observed
  replace: .na
taxonomic_updates: .na
exclude_observations: .na
questions: .na
